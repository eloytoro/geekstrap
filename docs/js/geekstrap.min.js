angular.module("fg.geekstrap.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("geekstrap/directives/alert/alert.html","<div class=\"alert alert-dismissible {{alert.class}}\" role=\"alert\" ng-repeat=\"alert in cluster\" ng-click=\"controller.destroy($index)\">\n    <button type=\"button\" class=\"close\"><span aria-hidden=\"true\">&times;</span>\n        <span class=\"sr-only\">Close</span></button>\n    <span>{{alert.text}}</span>\n</div>\n");
$templateCache.put("geekstrap/directives/circular-scroller/circular-scroller.html","<div class=\"fg-cscroller-wrapper\">\n    <div class=\"fg-cscroller-box\" ng-style=\"boxStyle\">\n    </div>\n</div>\n");
$templateCache.put("geekstrap/directives/modal/modal.html","<div class=\"fg-modal row vertical-block\" ng-class=\"{visible: visible}\">\n    <div class=\"fg-modal-panel vertical-center\">\n        <div class=\"fg-modal-panel-content\" ng-transclude>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("geekstrap/directives/navbar/navbar-tab.html","<div class=\"navbar-tab\" ng-transclude ng-class=\"{active: active}\">\n</div>\n");
$templateCache.put("geekstrap/directives/navbar/navbar.html","<div class=\"navbar\">\n    <div ng-transclude></div>\n    <div class=\"navbar-caret\" ng-style=\"caretOffset\"></div>\n</div>\n");
$templateCache.put("geekstrap/directives/progress-button/progress-button.html","<button class=\"progress-button\" ng-class=\"{loading: isLoading}\">\n    <div class=\"content\" ng-transclude></div>\n    <div class=\"progress-button-bar\" ng-style=\"loadingBar\"></div>\n</button>\n");
$templateCache.put("geekstrap/directives/sidebar/sidebar-item.html","<div class=\"sidebar-item\" ng-class=\"{active: active}\">\n    <div class=\"sidebar-item-label\" ng-transclude>\n    </div>\n    <div class=\"sidebar-item-icon\">\n        <span class=\"{{icon}}\"></span>\n    </div>\n</div>\n");
$templateCache.put("geekstrap/directives/sidebar/sidebar.html","<div class=\"sidebar\">\n    <div class=\"sidebar-toggle\">\n        <span class=\"{{icon}}\"></span>\n    </div>\n    <div class=\"sidebar-content\" ng-transclude ng-style=\"offset\"></div>\n</div>\n");}]);
angular.module('fg.geekstrap', ['ngAnimate', 'fg.geekstrap.templates']);

angular.module('fg.geekstrap')

.directive('sidebar', function() {
    return {
        restrict:'E',
        replace: true,
        transclude: true,
        templateUrl: 'geekstrap/directives/sidebar/sidebar.html',
        scope: {
            icon: '@',
            default: '=',
            persist: '='
        },
        controller: ['$scope', function($scope) {
            this.items = [];
            $scope.offset = {};
            this.setActive = function(index) {
                if (!$scope.persist) return;
                for (var key in this.items) {
                    this.items[key].active = key == index;
                    this.items[key].$digest();
                }
            };

            this.addItem = function(item) {
                var index = this.items.length;
                this.items.push(item);
                item.active = index == $scope.default;
                return index;
            };
        }],
        link: function (scope, element, attrs, controller) {
            element.children().eq(0).on('mouseenter', function() {
                if (scope.show) return;
                scope.peek = true;
                scope.offset.left = '-250px';
                scope.$digest();
            });
            element.children().eq(1).on('mouseenter', function() {
                scope.show = true;
                scope.offset.left = '0px';
                scope.$digest();
            });
            element.on('mouseleave', function() {
                scope.peek = false;
                scope.show = false;
                scope.offset.left = '-305px';
                scope.$digest();
            });
        }
    };
})

.directive('sidebarItem', function() {
    return {
        restrict:'E',
        replace: true,
        transclude: true,
        scope: {
            icon: '@'
        },
        templateUrl: 'geekstrap/directives/sidebar/sidebar-item.html',
        require: '^sidebar',
        link: function (scope, element, attrs, controller) {
            scope.index = controller.addItem(scope);
            element.on('click', function() {
                if (scope.active) {
                    scope.active = false;
                } else {
                    controller.setActive(scope.index);
                }
            });
        }
    };
});

angular.module('fg.geekstrap')

/**
 * @ngdoc directive
 * @name fg.geekstrap.directive:progress-button
 * @restrict E
 * @param {number=} model value within the scope that determines progress (from 0 to 100)
 * @param {function=} onload progress completion callback
 *
 * @description
 * A button that morphs into a loading bar whenever it's model value changes
 *
 * @example
<example module="app">
  <file name="index.html">
    <div ng-controller="BodyController" class="demo-pbutton">
      <progress-button model="progress" onload="onload()" class="hover-green" ng-click="doload()">
        click me
      </progress-button>
      <progress-button model="progress" onload="onload()" class="hover-blue" ng-click="doload()">
      click me
      </progress-button>
      <progress-button model="progress" onload="onload()" class="hover-red" ng-click="doload()">
      click me
      </progress-button>
    </div>
  </file>
</example>
 */
.directive('progressButton', function() {
    return {
        restrict:'E',
        replace: true,
        transclude: true,
        templateUrl: 'geekstrap/directives/progress-button/progress-button.html',
        scope: {
            model: '=',
            onload: '&'
        },
        controller: ['$scope', '$interval', '$timeout', function ($scope, $interval, $timeout) {
            var vm = this;
            $scope.isLoading = false;
            $scope.isFinishing = false;

            $scope.loadingBar = {
                width: '0px'
            };

            this.stopProgress = function() {
                $timeout(function() {
                    $scope.model = -1;
                }, 300);
                $scope.onload();
            };

            $scope.$watch('model', function(val) {
                $scope.isLoading = val >= 0;
                $scope.loadingBar.width = val + '%';
                if (val >= 100) {
                    vm.stopProgress();
                }
            });

        }],
        link: function (scope, element, attrs, controller) {
        }
    };
});

angular.module('fg.geekstrap')

.directive('navbar', function() {
    return {
        restrict:'E',
        replace: true,
        transclude: true,
        templateUrl: 'geekstrap/directives/navbar/navbar.html',
        scope: {
            default: "@"
        },
        controller: ['$scope', '$window', function ($scope, $window) {
            this.tabs = [];
            var vm = this;

            $scope.caretOffset = {};
            $scope.activeTab = 0;

            this.moveCaret = function(id) {
                var offset = 0;
                for (var i = 0; i < id; i++) {
                    offset += this.tabs[i].width;
                }
                $scope.caretOffset.left = offset + 'px';
                $scope.caretOffset.width = this.tabs[id].width + 'px';
            };

            this.setActive = function(id) {
                for (var key in this.tabs) {
                    this.tabs[key].active = id == key;
                    this.tabs[key].$digest();
                }
                $scope.activeTab = id;
                this.moveCaret(id);
                $scope.$digest();
            };

            this.addTab = function(tab) {
                var index = this.tabs.length;
                this.tabs[index] = tab;
                return index;
            };

            angular.element($window).bind('resize', function() {
                for (var key in vm.tabs) {
                    vm.tabs[key].refresh();
                }
                vm.moveCaret($scope.activeTab);
                $scope.$digest();
            });

        }],
        link: function (scope, element, attrs, controller) {
            for (var i = 0; i < controller.tabs.length; i++) {
                if (controller.tabs[i].link == scope.default) {
                    controller.tabs[i].active = true;
                    scope.activeTab = i;
                    controller.moveCaret(i);
                    break;
                }
            }
        }
    };
})

.directive('navbarTab', function() {
    return {
        restrict:'E',
        require: '^navbar',
        replace: true,
        transclude: true,
        templateUrl: 'geekstrap/directives/navbar/navbar-tab.html',
        scope: {
            link: '@',
            activable: '@'
        },
        link: function (scope, element, attrs, controller) {
            scope.width = $(element).width();
            scope.id = controller.addTab(scope);
            if (scope.activable != 'false') {
                element.on('click', function() {
                    controller.setActive(scope.id);
                });
            }
            scope.refresh = function() {
                scope.width = $(element).width();
            };
        }
    };
});

angular.module('fg.geekstrap')

/**
 * @ngdoc directive
 * @name fg.geekstrap.directive:modal
 * @restrict E
 * @param {boolean=} visible whether the modal is visible or not
 *
 * @description
 * Just your average day modal
 *
 * @example
<example module="app">
  <file name="index.html">
    <div ng-controller="BodyController">
      <modal visible="warningModalVisible">
        <p><h2>Warning!</h2></p>
        <p>An error occurred</p>
        <button class="hover-yellow fa fa-close" ng-click="warningModalShow(false)">Close</button>
      </modal>
      <button class="hover-red" ng-click="warningModalShow(true)">Show Modal</button>
    </div>
  </file>
</example>
 */
.directive('modal', function() {
    return {
        restrict:'E',
        replace: true,
        transclude: true,
        templateUrl: 'geekstrap/directives/modal/modal.html',
        scope: {
            visible: '='
        }
    };
});

angular.module('fg.geekstrap')

/**
 * @ngdoc directive
 * @name fg.geekstrap.directive:circular-scroller
 * @restrict E
 * @param {number=} scroll value within the scope that determines the horizontal scrolling of the directive
 *
 * @description
 * Repeats the transcluded elements across the directive's width, simulating an infinite circular scroller
 * Rules:
 *  - Elements inside the scroller MUST have a fixed width
 *  - Directives inside the scroller can't use the ng-transclude directive, this is a known bug caused by angular's compile method not removing the property from already compiled directives
 *
 * @example
 <example module="app">
     <file name="index.html">
         <div ng-controller="BodyController" class="demo-cscroller">
             <circular-scroller scroll="scroll" fg-alias="cscroller">
                 <img src="../demo/img/logo_footer.png" style="width: 190px"></img>
             </circular-scroller>
             <button ng-click="doscroll(-130)" class="btn color-purple btn-icon btn-bullet raise hover">
                <i class="fa fa-arrow-left"></i>
                 left
             </button>
             <button ng-click="doscroll(130)" class="btn color-lightblue raise hover btn-icon">
                 <i class="fa fa-arrow-right"></i>
                 right
             </button>
         </div>
     </file>
 </example>
 */
.directive('circularScroller', ['$compile', function ($compile) {
    return {
        restrict:'E',
        replace: true,
        transclude: true,
        templateUrl: 'geekstrap/directives/circular-scroller/circular-scroller.html',
        scope: {
            scroll: '=?',
            alias: '=?'
        },
        controller: ['$scope', '$element', '$window', '$timeout', '$compile',
            function ($scope, $element, $window, $timeout, $compile) {
                var _this = this;
                var innerWidth = 0;
                var box = $element[0].getElementsByClassName('fg-cscroller-box')[0];
                var offset = 0;
                var timeout;
                var overflowRight = 0;
                var overflowLeft = 0;

                this.shown = [];
                this.children = [];
                this.exports = {};

                $scope.boxStyle = {};

                if (!$scope.scroll) $scope.scroll = 0;

                function insert (element) {
                    innerWidth += element[0].offsetWidth;
                    element.addClass('fg-cscroller-element');
                    $scope.boxStyle.width = innerWidth + 'px';
                }

                this.append = (function (link) {
                    return function () {
                        _this.children[overflowRight]
                        ($scope.$parent, link);
                    };
                })(function (clone) {
                    overflowRight = (overflowRight + 1) % _this.children.length;
                    _this.shown.push(clone);
                    box.appendChild(clone[0]);
                    insert(clone);
                });

                this.prepend = (function (link) {
                    return function () {
                        _this.children[_this.children.length - overflowLeft - 1]
                        ($scope.$parent, link);
                    };
                })(function (clone) {
                    overflowLeft = (overflowLeft + 1) % _this.children.length;
                    _this.shown.unshift(clone);
                    box.insertBefore(clone[0], box.firstChild);
                    insert(clone);
                    offset += clone[0].offsetWidth;
                    $scope.boxStyle.left = -offset + 'px';
                });

                this.pop = function () {
                    var element = _this.shown.pop()[0];
                    overflowRight = (overflowRight - 1 + _this.children.length) % _this.children.length;
                    innerWidth -= element.offsetWidth;
                    box.removeChild(element);
                };

                this.shift = function () {
                    var element = _this.shown.shift()[0];
                    innerWidth -= element.offsetWidth;
                    overflowLeft = (overflowLeft - 1 + _this.children.length) % _this.children.length;
                    offset -= element.offsetWidth;
                    $scope.boxStyle.left = -offset + 'px';
                    box.removeChild(element);
                };

                this.build = function () {
                    var outerWidth = $element[0].offsetWidth;
                    while (outerWidth > innerWidth - offset + $scope.scroll)
                        _this.append();
                    while (offset - $scope.scroll < 0)
                        _this.prepend();
                    $scope.boxStyle.width = innerWidth + 'px';
                    $scope.boxStyle['margin-left'] = $scope.scroll + 'px';
                    if (timeout) { $timeout.cancel(timeout); }
                    timeout = $timeout(_this.cleanup, 1000);
                };

                this.cleanup = function () {
                    var outerWidth = $element[0].offsetWidth;
                    while (outerWidth + _this.shown[_this.shown.length - 1][0].offsetWidth < innerWidth - offset + $scope.scroll)
                        _this.pop();
                    while (offset - $scope.scroll > _this.shown[0][0].offsetWidth)
                        _this.shift();
                    $scope.boxStyle.width = innerWidth + 'px';
                };

                this.exports.transposeLeft = function (count) {
                    if (count > 0) {
                        var current = offset;
                        for (var i = 0; i < count; i++) {
                            _this.prepend();
                        }
                        $scope.scroll += offset - current;
                    } else {
                        var acc = 0;
                        count = Math.abs(count);
                        for (var j = 0; j < count; j++) {
                            acc += _this.shown[j][0].offsetWidth;
                        }
                        $scope.scroll -= acc;
                    }
                };

                this.exports.transposeRight = function (count) {
                    if (count > 0) {
                        var acc = 0;
                        for (var i = 1; i <= count; i++) {
                            acc += _this.shown[_this.shown.length - i][0].offsetWidth;
                        }
                        $scope.scroll -= acc;
                    } else {
                        var current = innerWidth;
                        count = Math.abs(count);
                        for (var j = 0; j < count; j++) {
                            _this.append();
                        }
                        $scope.scroll += innerWidth - current;
                    }
                };

                angular.element($window).bind('resize', function() {
                    _this.build();
                    $scope.$apply();
                });
            }
        ],
        link: function (scope, element, attrs, controller, transclude) {
            transclude(scope.$parent, function(clone, scope) {
                for (var i = 0; i < clone.length; i++) {
                    if (clone[i] instanceof Element)
                        controller.children.push($compile(clone[i]));
                }
            });

            scope.$watch('scroll', function (val) {
                controller.build();
            });

            if (scope.alias) scope.alias = controller.exports;
        }
    };
}]);

angular.module('fg.geekstrap')

.directive('alert', function() {
    return {
        restrict:'E',
        replace: true,
        templateUrl: 'geekstrap/directives/alert/alert.html',
        scope: {
            cluster: '=model'
        },
        controller: ['$scope', '$timeout', function($scope, $timeout) {

            var vm = this;
            $scope.visible = false;

            this.destroy = function(index) {
                $scope.cluster.splice(index, 1);
            };

        }],
        controllerAs: 'controller',
        link: function (scope, element, attrs, controller) {
        }
    };
});

angular.module("fg.geekstrap.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("geekstrap/directives/alert/alert.html","<div class=\"alert alert-dismissible {{alert.class}}\" role=\"alert\" ng-repeat=\"alert in cluster\" ng-click=\"controller.destroy($index)\">\n    <button type=\"button\" class=\"close\"><span aria-hidden=\"true\">&times;</span>\n        <span class=\"sr-only\">Close</span></button>\n    <span>{{alert.text}}</span>\n</div>\n");
$templateCache.put("geekstrap/directives/circular-scroller/circular-scroller.html","<div class=\"fg-cscroller-wrapper\">\n    <div class=\"fg-cscroller-box\" ng-style=\"boxStyle\">\n    </div>\n</div>\n");
$templateCache.put("geekstrap/directives/modal/modal.html","<div class=\"fg-modal row vertical-block\" ng-class=\"{visible: visible}\">\n    <div class=\"fg-modal-panel vertical-center\">\n        <div class=\"fg-modal-panel-content\" ng-transclude>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("geekstrap/directives/navbar/navbar-tab.html","<div class=\"navbar-tab\" ng-transclude ng-class=\"{active: active}\">\n</div>\n");
$templateCache.put("geekstrap/directives/navbar/navbar.html","<div class=\"navbar\">\n    <div ng-transclude></div>\n    <div class=\"navbar-caret\" ng-style=\"caretOffset\"></div>\n</div>\n");
$templateCache.put("geekstrap/directives/progress-button/progress-button.html","<button class=\"progress-button\" ng-class=\"{loading: isLoading}\">\n    <div class=\"content\" ng-transclude></div>\n    <div class=\"progress-button-bar\" ng-style=\"loadingBar\"></div>\n</button>\n");
$templateCache.put("geekstrap/directives/sidebar/sidebar-item.html","<div class=\"sidebar-item\" ng-class=\"{active: active}\">\n    <div class=\"sidebar-item-label\" ng-transclude>\n    </div>\n    <div class=\"sidebar-item-icon\">\n        <span class=\"{{icon}}\"></span>\n    </div>\n</div>\n");
$templateCache.put("geekstrap/directives/sidebar/sidebar.html","<div class=\"sidebar\">\n    <div class=\"sidebar-toggle\">\n        <span class=\"{{icon}}\"></span>\n    </div>\n    <div class=\"sidebar-content\" ng-transclude ng-style=\"offset\"></div>\n</div>\n");}]);